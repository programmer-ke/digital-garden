* org-mode structure
Test in org is structured by headings, denoted by lines starting with
one or more * so we are curently in a section!

** A subheading
Starts with an extra * and so on

To start a new header of same level or list item, use M-RET

** Like this
 - and
 - like this

** default global state
Can be set per-file with the STARTUP keyword e.g.
#+STARTUP: content

Other options are: overview, showall ...

** lists

*** bullet lists
 - bullet lists start a line with one or more spaces and a -
 - pressing M-RET gives a you a new bullet
 - we might also like nested bullets (with M-RET TAB to ident it)
   - like this one. M-RET now gives another one on the same level
   - like this one
 - the nice thing is that for long lines of text, emacs wraps them so
   that you can use them with the bullet (doesn't seem to happen)
 - you can also re-order list items and change identation with M-up
   and M-down and M-left and M-right
 - you can change bullet style with S-left and S-right

*** TODO numbered lists
1) numbered lists are also possible. M-RET gives the next number
2) Like that
3) and this

*** checklists [1/5]
- [ ] we can have check lists. M-S-RET gives a new item with a check box
- [ ] Like that
- [X] C-c C-c checks/unchecks a checkbox
- [-] You can have sub items (M-S-RET TAB)
  - [ ] like this
  - [X] and this
- [ ] and you can track no. of items by adding [0/0] to the end of a
  line above a checklist

*** definition lists
 - definition lists :: these are useful sometimes
 - item 2 :: M-RET again gives another item
 - term :: definition

*** todo items

Create new todo item with same header level using M-S RET 

*** TODO like so


** TODO tables                                                       :tables:
Org creates tables by using | to separate columns and a line of ---
(inserted with C-c - while at the end of the previous row) to add horizontal lines

TAB goes to the next column and to the next row of the table from the
end of the previous one
| ID | x | y | z | comments                                       |
|----+---+---+---+------------------------------------------------|
| A  | 1 | 2 | 4 | This is some comment on A                      |
| B  | 3 | 9 | 7 | Some other very very very.. .long comment on B |

We can now move rows and columns around with M-arrow, and insert or
delete columns with M-S-arrow

We can create a table using C-c |, which will prompt for dimensions
if no region is selected (e.g. 5x3 below)

|   |   |   |   |   |
|---+---+---+---+---|
|   |   |   |   |   |
|   |   |   |   |   |

The same command can create a table from existing text. For example,
creating one for the following text by highlighting it

ID X Y
1  2 45
3  -1 9

| ID |  X |  Y |
|  1 |  2 | 45 |
|  3 | -1 |  9 |

You can also save tables to their own files by putting the cursor in
the table and using M-x org-table-export. You'll be asked for a file name
and format. For the format, type orgtbl-to and press TAB to see the
list of options.

** tags                                                          :tags:intro:
Implicit tags can be set for all items in file using a line
that starts with a hash like this

#+FILETAGS: :orgmode:tutorial:

These are inherited by all headers in the file

C-c C-q can be used to enter tags for the current headline. If the
cursor is on the headline itself, C-c C-c does the same thing

To search by tags, use C-c / m or C-c \

To search by tags globally, use the command M-x org-agenda, then
 select m.

Locations added to ~org-agenda-files~ like below will be searched.

#+begin_src elisp
;; Set list of agenda files
(setq org-agenda-files '("~/digital-garden"))
#+end_src

** navigation

Headings can be expanded or collapsed by moving to the (sub) heading
and pressing TAB. S-TAB cycles all headings. You can jump to the next
and previous headings by C-c C-n and C-c C-p respectively.

Use C-c C-f and C-c C-b to navigate between headers at the same level

C-c C-u to navigate backwards to higher level heading

Move headings up and down to reorder them with M-up and M-down. You
can change the level of headings with M-left and M-right. (M-S-left
and M-S-right also change the levels of any subheadings.)

To only display current subtree in buffer, use

C-x n s and,

C-x n w to widen again

To move region or entry to new location in the document tree, used

C-c C-w

** Sparse trees
To construct a sparse tree for selected info, with as much of the document as possible
folded, use C-c /

* Links and images                                             :links:images:

Let's download an image to the current directory with:

~curl http://www.star.bris.ac.uk/bjm/superman_cluster.gif -o superman_cluster.gif~

We link to a file using C-u C-c C-l and type it's name. Use tab
completion to select the image we downloaded an optionally enter a
description.

[[file:superman_cluster.gif][superman gif]]

We can follow the link with C-c C-o

The structure of a link looks like the following (wrapped in an example
block to prevent org mode from interpreting it).

#+BEGIN_EXAMPLE
[[link address][description]]
#+END_EXAMPLE


To link specifically to an image, we omit the description part

#+BEGIN_EXAMPLE
[[./img/wenger.jpg]]
#+END_EXAMPLE

[[./img/wenger.jpg]]

To toggle the image inline, we use C-c C-x C-v (M-x org-toggle-inline-images)

Links to webpages are added by using the hyperlink as the address
component. A quick way is C-c C-l. For example, linking to brave search:

#+BEGIN_EXAMPLE
[[https://search.brave.com/][brave search]]
#+END_EXAMPLE

[[https://search.brave.com/][brave search]]

We can link to the tables section in this document like so

#+BEGIN_EXAMPLE
[[tables][link to tables above]]
#+END_EXAMPLE

[[tables][link to tables above]]

We can add name and captions to our image as follows

#+begin_example
#+CAPTION: Arsenal loss
#+NAME: wenger.img
[[./img/wenger.jpg]]
#+end_example

#+CAPTION: Arsenal loss
#+NAME: wenger.img
[[./img/wenger.jpg]]

This means we can refer to our image in a link using its name [[wenger.img]]

* Formatting text and code                             :formatting:code:text:

** Simple formatting

We apply simple formatting by enclosing text in special characters e.g.
 - /italicised text/
 - *bold text*
 - _underlines_
 - =literal text=
 - ~code~ (generally appears same as literal text)

** Formatting blocks of text

Enclose them in blocks marking them as specific types e.g.

#+BEGIN_EXAMPLE
One can type code that org should not mess with e.g. [[link]]. Rendered
as monospace font when exported
#+END_EXAMPLE


#+BEGIN_QUOTE
Encloses text that should appear as a quotation
#+END_QUOTE

#+BEGIN_CENTER
This text will be centered when exported
#+END_CENTER

We can save time typing a block wrapper by using the C-c C-,
(org-insert-structure-template).

e.g. C-c C-, then s gives

#+begin_src
  
#+end_src

** LaTeX

Org mode can understand and correctly exports simple LaTeX like

\begin{eqnarray}
x^2 + \left(\frac{y}{z}\right)^4 = 0
\end{eqnarray}


For more complex LaTeX, enclose in a block

#+begin_export latex
\begin{eqnarray}
x^2 + \left(\frac{y}{z}\right)^4 = 0
\end{eqnarray}
#+end_export


** Source code blocks

To enclose souce code, we use a source block. We can tell org-mode what
kind of source code it is e.g. sh for shell.

#+begin_src shell
  echo "hello $USER! Today is `date`"
  sleep 2
  echo "Goodbye!!"
  exit
#+end_src

#+RESULTS:
| hello     | krm! | Today | is | Sun | 11 | Jun | 2023 | 10:41:15 | AM | EAT |
| Goodbye!! |      |       |    |     |    |     |      |          |    |     |

We can get org to syntax highlight by adding the following in the
emacs config file

#+begin_src elisp
  ;; synax hightlight code blocks
  ;; set this in .emacs or emacs.d/init.el
  (setq org-src-fontify-natively t)
#+end_src

When inside the source block, C-c ' will open a buffer in the major
mode of the programming language specified. C-c ' again will return
to the org document and show the additional edits.

C-c C-c inside a code block will execute it.

Some further examples on babel (code execution) [[https://orgmode.org/worg/org-contrib/babel/intro.html][here]].

See [[https://orgmode.org/worg/org-contrib/babel/languages/index.html][this]] for language specific documentation

We can tell org-mode which languages to support by adding something
like the following in the emacs config file

#+BEGIN_SRC elisp
;; Some initial languages we want org-babel to support
(org-babel-do-load-languages
 'org-babel-load-languages
 '(
   (sh . t)
   (python . t)
   (R . t)
   (ditaa . t)
   (perl . t)
   (gnuplot t)
   ))
#+END_SRC


#+begin_src python :results output
  import time
  print("todays date is %s" % time.ctime())
  print("2 + 2")
  print(2 + 2)
  import sys
  print(sys.version)
#+end_src

#+RESULTS:
: todays date is Sun Jun 11 10:42:08 2023
: 2 + 2
: 4
: 3.8.10 (default, May 26 2023, 14:05:08) 
: [GCC 9.4.0]

More on literate programming [[file:literate_programming.org][here]]

Compact guide: https://orgmode.org/guide/


