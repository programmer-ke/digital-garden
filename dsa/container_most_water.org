* Container with most water                       :two_pointers:leetcode:dsa:

:PROPERTIES:
:Title: 11. Container with most water
:Link: https://leetcode.com/problems/container-with-most-water
:END:

** Approach                                                         :insight:

Start by placing two pointers on extreme ends.
While they don't intersect, calculate the area then advance the
pointer with the lower height.

Why? We're optimizing for greater areas and it is impossible to
find a greater that the current one if the pointer with the
greater height it advanced.

** Solution

#+begin_src python
class Solution:
    def maxArea(self, height: List[int]) -> int:
        lo, hi = 0, len(height) - 1
        max_area = 0
        while lo < hi:
            area = self.get_area(lo, hi, height)
            if area > max_area:
                max_area = area
            if height[lo] < height[hi]:
                lo += 1
            else:
                hi -= 1
        return max_area

    def get_area(self, lo, hi, arr):
        width = hi - lo
        height = min(arr[hi], arr[lo])
        return width * height
#+end_src

** Analysis

*** Space complexity
space complexity: O(n) - timsort creates an extra array

*** Time complexity

O(n^2), an improvement over O(n^3) of the bruteforce solution.
