* Maximum Average Subarray                      :leetcode:dsa:sliding_window:

:PROPERTIES:
:Title: Maximum Average Subarray 1
:Link: https://leetcode.com/problems/maximum-average-subarray-i
:END:

** Approach                                                         :insight:

Advance a window of size k along the list

** Solution

#+begin_src python
class Solution:
    def findMaxAverage(self, nums: List[int], k: int) -> float:
        total = sum(nums[:k])
        max_total = total
        for i in range(k, len(nums)):
            total += nums[i]
            total -= nums[i-k]
            if total > max_total:
                max_total = total
        return max_total / k
#+end_src

** Analysis

*** Space complexity
O(1)

*** Time complexity

O(n)
