* 3 sum                                           :two_pointers:leetcode:dsa:

:PROPERTIES:
:Title: 15. Three sum
:Link: https://leetcode.com/problems/3sum
:END:

** Approach                                                         :insight:

Sorting can enable a two pointer approach by fixing one of the
pointers at the beginning of the array.

To avoid duplicates, each time a pointer is moved, all duplicates numbers
are skipped over.


** Solution

#+begin_src python
class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        nums.sort()
        triplets = []
        length = len(nums)
        i = 0
        while i < length - 2:
            left, right = i + 1, length - 1
            while left < right:
                total = nums[i] + nums[left] + nums[right]
                if total == 0:
                    triplet = [nums[i], nums[left], nums[right]]
                    triplets.append(triplet)
                    left += 1
                    while nums[left - 1] == nums[left] and left < right:
                        left += 1
                elif total > 0:
                    right -= 1
                    while nums[right] == nums[right + 1] and right > left:
                        right -= 1
                elif total < 0:
                    left += 1
            i += 1
            while nums[i-1] == nums[i] and i < length - 2:
                i += 1
        return triplets
#+end_src

** Analysis

*** Space complexity
space complexity: O(n) - timsort creates an extra array

*** Time complexity

O(n^2), an improvement over O(n^3) of the bruteforce solution.
