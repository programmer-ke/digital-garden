* Sort 3 unique numbers                           :two_pointers:dsa:

:PROPERTIES:
:Title: Sort 3 unique numbers
:END:

** Approach                                                         :insight:

Use two pointers to maintain upper and lower bounds.
After iteration, all values between the two pointers
inclusive would be 2s

** Solution

#+begin_src python :results output
def sort_nums(nums):
    ones_index = 0
    threes_index = len(nums) - 1
    index = 0
    while index <= threes_index:
        if nums[index] == 1:
            nums[index], nums[ones_index] = nums[ones_index], nums[index]
            ones_index += 1
            index += 1
        elif nums[index] == 3:
            nums[index], nums[threes_index] = nums[threes_index], nums[index]
            threes_index -= 1
            # not incrementing index here so as to check swapped number
        else:
            index += 1

    return nums

assert sort_nums([3, 3, 2, 1, 3, 2, 1]) == [1, 1, 2, 2, 3, 3, 3]
#+end_src

#+RESULTS:
: [1, 1, 2, 2, 3, 3, 3]

** Analysis

*** Space complexity
space complexity: O(1) - No extra space utilized

*** Time complexity
0(n)
