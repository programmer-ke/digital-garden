* Intro

- Software systems tend towards chaos and complexity, known as the
  "Big Ball of Mud" antipattern.
- Encapsulation and abstraction are key tools for maintaining order
  and simplicity in code.
- Layered architectures can help manage dependencies between code
  components.
- The Dependency Inversion Principle (DIP) is crucial for decoupling
  high-level business logic from low-level technical details.
- DIP states that high-level modules should depend on abstractions,
  not low-level modules.
- A Domain Model pattern can help keep business logic organized and
  maintainable.

* Domain Modeling 

- Unit testing the domain model can help describe the domain and
  define the domain interfaces

- Entities have long-lived identities and can change over time, while
  value objects are defined by their attributes and are usually
  immutable.

- Frozen dataclasses and tuples are great for value objects

- Entities classes can extend =__eq__= and =__hash__= for custom
  equality comparisons

- A domain service can be a function that performs a specific business
  operation, and doesn't have to be a class

- Exceptions can be used to represent domain concepts, such as being
  out of stock, and should be named using the ubiquitous language of
  the business domain
